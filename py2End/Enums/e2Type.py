from .e2Enum import E2Enum
import gi
gi.require_version('Atspi', '2.0')
from gi.repository import Atspi

class E2LocaleType(E2Enum):
    MESSAGES = (hash(Atspi.LocaleType(0)), 'messages')
    COLLATE = (hash(Atspi.LocaleType(1)), 'collate')
    CTYPE = (hash(Atspi.LocaleType(2)), 'ctype')
    MONETARY = (hash(Atspi.LocaleType(3)), 'monetary')
    NUMERIC = (hash(Atspi.LocaleType(4)), 'numeric')
    TIME = (hash(Atspi.LocaleType(5)), 'time')

class E2RelationType(E2Enum):
    NULL = (hash(Atspi.RelationType(0)), 'null')
    LABEL_FOR = (hash(Atspi.RelationType(1)), 'label for a object')
    LABELLED_BY = (hash(Atspi.RelationType(2)), 'labelled by a object')
    CONTROLLER_FOR = (hash(Atspi.RelationType(3)), 'controller for a object')
    CONTROLLED_BY = (hash(Atspi.RelationType(4)), 'controlled by a object')
    MEMBER_OF = (hash(Atspi.RelationType(5)), 'member of a group')
    TOOLTIP_FOR = (hash(Atspi.RelationType(6)), 'tooltip of a object')
    NODE_CHILD_OF = (hash(Atspi.RelationType(7)), 'child of a target')
    NODE_PARENT_OF = (hash(Atspi.RelationType(8)), 'parent of a target')
    EXTENDED = (hash(Atspi.RelationType(9)), 'not specified')
    FLOWS_TO = (hash(Atspi.RelationType(10)), 'flows to a object')
    FLOWS_FROM = (hash(Atspi.RelationType(11)), 'flows from a object')
    SUBWINDOW_OF = (hash(Atspi.RelationType(12)), 'subwindow of a object')
    EMBEDS = (hash(Atspi.RelationType(13)), 'embeds a object')
    EMBEDDED_BY = (hash(Atspi.RelationType(14)), 'content rendered by a embedded object')
    POPUP_FOR = (hash(Atspi.RelationType(15)), 'popup for')
    PARENT_WINDOW_OF = (hash(Atspi.RelationType(16)), 'parent window of')
    DESCRIPTION_FOR = (hash(Atspi.RelationType(17)), 'provide description of')
    DESCRIBED_BY = (hash(Atspi.RelationType(18)), 'description provided by')
    DETAILS = (hash(Atspi.RelationType(19)), 'id detailed for a object')
    DETAILS_FOR = (hash(Atspi.RelationType(20)), 'has details of a object')
    ERROR_MESSAGE = (hash(Atspi.RelationType(21)), 'object has errors')
    ERROR_FOR = (hash(Atspi.RelationType(22)), 'describes error of a object')
    LAST_DEFINED = (hash(Atspi.RelationType(23)), 'last defined')

class E2ScrollType(E2Enum):
    TOP_LEFT = (hash(Atspi.ScrollType(0)), 'scroll top left')
    BOTTOM_RIGHT = (hash(Atspi.ScrollType(1)), 'scroll bottom right')
    TOP_EDGE = (hash(Atspi.ScrollType(2)), 'scroll top edge')
    BOTTOM_EDGE = (hash(Atspi.ScrollType(3)), 'scroll bottom edge')
    LEFT_EDGE = (hash(Atspi.ScrollType(4)), 'scroll left edge')
    RIGHT_EDGE = (hash(Atspi.ScrollType(5)), 'scroll right edge')
    ANYWHERE = (hash(Atspi.ScrollType(6)), 'scroll anywhere')

class E2StateType(E2Enum):
    INVALID = (hash(Atspi.StateType(0)), 'invalid')
    ACTIVE = (hash(Atspi.StateType(1)), 'active')
    ARMED = (hash(Atspi.StateType(2)), 'armed')
    BUSY = (hash(Atspi.StateType(3)), 'busy')
    CHECKED = (hash(Atspi.StateType(4)), 'checked')
    COLLAPSED = (hash(Atspi.StateType(5)), 'collapsed')
    DEFUNCT = (hash(Atspi.StateType(6)), 'defunct')
    EDITABLE = (hash(Atspi.StateType(7)), 'editable')
    ENABLED = (hash(Atspi.StateType(8)), 'enabled')
    EXPANDABLE = (hash(Atspi.StateType(9)), 'expandable')
    EXPANDED = (hash(Atspi.StateType(10)), 'expanded')
    FOCUSABLE = (hash(Atspi.StateType(11)), 'focusable')
    FOCUSED = (hash(Atspi.StateType(12)), 'focused')
    HAS_TOOLTIP = (hash(Atspi.StateType(13)), 'has tooltip')
    HORIZONTAL = (hash(Atspi.StateType(14)), 'horizontal')
    ICONIFIED = (hash(Atspi.StateType(15)), 'iconified')
    MODAL = (hash(Atspi.StateType(16)), 'modal')
    MULTI_LINE = (hash(Atspi.StateType(17)), 'multi line')
    MULTISELECTABLE = (hash(Atspi.StateType(18)), 'multi selectable')
    OPAQUE = (hash(Atspi.StateType(19)), 'opaque')
    PRESSED = (hash(Atspi.StateType(20)), 'pressed')
    RESIZABLE = (hash(Atspi.StateType(21)), 'resizable')
    SELECTABLE = (hash(Atspi.StateType(22)), 'selectable')
    SELECTED = (hash(Atspi.StateType(23)), 'selected')
    SENSITIVE = (hash(Atspi.StateType(24)), 'sensitive')
    SHOWING = (hash(Atspi.StateType(25)), 'showing')
    SINGLE_LINE = (hash(Atspi.StateType(26)), 'single line')
    STALE = (hash(Atspi.StateType(27)), 'stale')
    TRANSIENT = (hash(Atspi.StateType(28)), 'transient')
    VERTICAL = (hash(Atspi.StateType(29)), 'vertical')
    VISIBLE = (hash(Atspi.StateType(30)), 'visible')
    MANAGES_DESCENDANTS = (hash(Atspi.StateType(31)), 'manages descendants')
    INDETERMINATE = (hash(Atspi.StateType(32)), 'indeterminate')
    REQUIRED = (hash(Atspi.StateType(33)), 'required')
    TRUNCATED = (hash(Atspi.StateType(34)), 'truncated')
    ANIMATED = (hash(Atspi.StateType(35)), 'animated')
    INVALID_ENTRY = (hash(Atspi.StateType(36)), 'invalid entry')
    SUPPORTS_AUTOCOMPLETION = (hash(Atspi.StateType(37)), 'supports autocompletion')
    SELECTABLE_TEXT = (hash(Atspi.StateType(38)), 'selectable text')
    IS_DEFAULT = (hash(Atspi.StateType(39)), 'is default')
    VISITED = (hash(Atspi.StateType(40)), 'visited')
    CHECKABLE = (hash(Atspi.StateType(41)), 'checkable')
    HAS_POPUP = (hash(Atspi.StateType(42)), 'has popup')
    READ_ONLY = (hash(Atspi.StateType(43)), 'read only')
    LAST_DEFINED = (hash(Atspi.StateType(44)), 'last defined')

class E2TextBoundaryType(E2Enum):
    CHAR = (hash(Atspi.TextBoundaryType(0)), 'char')
    WORD_START = (hash(Atspi.TextBoundaryType(1)), 'word start')
    WORD_END = (hash(Atspi.TextBoundaryType(2)), 'word end')
    SENTENCE_START = (hash(Atspi.TextBoundaryType(3)), 'sentence start')
    SENTENCE_END = (hash(Atspi.TextBoundaryType(4)), 'sentence end')
    LINE_START = (hash(Atspi.TextBoundaryType(5)), 'line start')
    LINE_END = (hash(Atspi.TextBoundaryType(6)), 'line end')

class E2TextClipType(E2Enum):
    NONE = (hash(Atspi.TextClipType(0)), 'none')
    MIN = (hash(Atspi.TextClipType(1)), 'min')
    MAX = (hash(Atspi.TextClipType(2)), 'max')
    BOTH = (hash(Atspi.TextClipType(3)), 'both')

class E2TextGranularity(E2Enum):
    CHAR = (hash(Atspi.TextGranularity(0)), 'character')
    WORD = (hash(Atspi.TextGranularity(1)), 'word')
    SENTENCE = (hash(Atspi.TextGranularity(2)), 'sentence')
    LINE = (hash(Atspi.TextGranularity(3)), 'line')
    PARAGRAPH = (hash(Atspi.TextGranularity(4)), 'paragraph')